/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AgentProcessingFile as PrismaAgentProcessingFile,
} from "@prisma/client";

export class AgentProcessingFileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AgentProcessingFileCountArgs, "select">
  ): Promise<number> {
    return this.prisma.agentProcessingFile.count(args);
  }

  async agentProcessingFiles(
    args: Prisma.AgentProcessingFileFindManyArgs
  ): Promise<PrismaAgentProcessingFile[]> {
    return this.prisma.agentProcessingFile.findMany(args);
  }
  async agentProcessingFile(
    args: Prisma.AgentProcessingFileFindUniqueArgs
  ): Promise<PrismaAgentProcessingFile | null> {
    return this.prisma.agentProcessingFile.findUnique(args);
  }
  async createAgentProcessingFile(
    args: Prisma.AgentProcessingFileCreateArgs
  ): Promise<PrismaAgentProcessingFile> {
    return this.prisma.agentProcessingFile.create(args);
  }
  async updateAgentProcessingFile(
    args: Prisma.AgentProcessingFileUpdateArgs
  ): Promise<PrismaAgentProcessingFile> {
    return this.prisma.agentProcessingFile.update(args);
  }
  async deleteAgentProcessingFile(
    args: Prisma.AgentProcessingFileDeleteArgs
  ): Promise<PrismaAgentProcessingFile> {
    return this.prisma.agentProcessingFile.delete(args);
  }
}
