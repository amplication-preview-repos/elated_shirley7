/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AgentProcessingFileService } from "../agentProcessingFile.service";
import { AgentProcessingFileCreateInput } from "./AgentProcessingFileCreateInput";
import { AgentProcessingFile } from "./AgentProcessingFile";
import { AgentProcessingFileFindManyArgs } from "./AgentProcessingFileFindManyArgs";
import { AgentProcessingFileWhereUniqueInput } from "./AgentProcessingFileWhereUniqueInput";
import { AgentProcessingFileUpdateInput } from "./AgentProcessingFileUpdateInput";

export class AgentProcessingFileControllerBase {
  constructor(protected readonly service: AgentProcessingFileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AgentProcessingFile })
  async createAgentProcessingFile(
    @common.Body() data: AgentProcessingFileCreateInput
  ): Promise<AgentProcessingFile> {
    return await this.service.createAgentProcessingFile({
      data: data,
      select: {
        agentId: true,
        createdAt: true,
        fileName: true,
        id: true,
        processingDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AgentProcessingFile] })
  @ApiNestedQuery(AgentProcessingFileFindManyArgs)
  async agentProcessingFiles(
    @common.Req() request: Request
  ): Promise<AgentProcessingFile[]> {
    const args = plainToClass(AgentProcessingFileFindManyArgs, request.query);
    return this.service.agentProcessingFiles({
      ...args,
      select: {
        agentId: true,
        createdAt: true,
        fileName: true,
        id: true,
        processingDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AgentProcessingFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async agentProcessingFile(
    @common.Param() params: AgentProcessingFileWhereUniqueInput
  ): Promise<AgentProcessingFile | null> {
    const result = await this.service.agentProcessingFile({
      where: params,
      select: {
        agentId: true,
        createdAt: true,
        fileName: true,
        id: true,
        processingDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AgentProcessingFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAgentProcessingFile(
    @common.Param() params: AgentProcessingFileWhereUniqueInput,
    @common.Body() data: AgentProcessingFileUpdateInput
  ): Promise<AgentProcessingFile | null> {
    try {
      return await this.service.updateAgentProcessingFile({
        where: params,
        data: data,
        select: {
          agentId: true,
          createdAt: true,
          fileName: true,
          id: true,
          processingDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AgentProcessingFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAgentProcessingFile(
    @common.Param() params: AgentProcessingFileWhereUniqueInput
  ): Promise<AgentProcessingFile | null> {
    try {
      return await this.service.deleteAgentProcessingFile({
        where: params,
        select: {
          agentId: true,
          createdAt: true,
          fileName: true,
          id: true,
          processingDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
