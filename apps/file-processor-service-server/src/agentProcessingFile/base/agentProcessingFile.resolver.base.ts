/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AgentProcessingFile } from "./AgentProcessingFile";
import { AgentProcessingFileCountArgs } from "./AgentProcessingFileCountArgs";
import { AgentProcessingFileFindManyArgs } from "./AgentProcessingFileFindManyArgs";
import { AgentProcessingFileFindUniqueArgs } from "./AgentProcessingFileFindUniqueArgs";
import { CreateAgentProcessingFileArgs } from "./CreateAgentProcessingFileArgs";
import { UpdateAgentProcessingFileArgs } from "./UpdateAgentProcessingFileArgs";
import { DeleteAgentProcessingFileArgs } from "./DeleteAgentProcessingFileArgs";
import { AgentProcessingFileService } from "../agentProcessingFile.service";
@graphql.Resolver(() => AgentProcessingFile)
export class AgentProcessingFileResolverBase {
  constructor(protected readonly service: AgentProcessingFileService) {}

  async _agentProcessingFilesMeta(
    @graphql.Args() args: AgentProcessingFileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AgentProcessingFile])
  async agentProcessingFiles(
    @graphql.Args() args: AgentProcessingFileFindManyArgs
  ): Promise<AgentProcessingFile[]> {
    return this.service.agentProcessingFiles(args);
  }

  @graphql.Query(() => AgentProcessingFile, { nullable: true })
  async agentProcessingFile(
    @graphql.Args() args: AgentProcessingFileFindUniqueArgs
  ): Promise<AgentProcessingFile | null> {
    const result = await this.service.agentProcessingFile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AgentProcessingFile)
  async createAgentProcessingFile(
    @graphql.Args() args: CreateAgentProcessingFileArgs
  ): Promise<AgentProcessingFile> {
    return await this.service.createAgentProcessingFile({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AgentProcessingFile)
  async updateAgentProcessingFile(
    @graphql.Args() args: UpdateAgentProcessingFileArgs
  ): Promise<AgentProcessingFile | null> {
    try {
      return await this.service.updateAgentProcessingFile({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AgentProcessingFile)
  async deleteAgentProcessingFile(
    @graphql.Args() args: DeleteAgentProcessingFileArgs
  ): Promise<AgentProcessingFile | null> {
    try {
      return await this.service.deleteAgentProcessingFile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
