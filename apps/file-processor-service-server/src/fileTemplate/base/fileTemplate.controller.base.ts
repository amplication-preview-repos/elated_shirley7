/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FileTemplateService } from "../fileTemplate.service";
import { FileTemplateCreateInput } from "./FileTemplateCreateInput";
import { FileTemplate } from "./FileTemplate";
import { FileTemplateFindManyArgs } from "./FileTemplateFindManyArgs";
import { FileTemplateWhereUniqueInput } from "./FileTemplateWhereUniqueInput";
import { FileTemplateUpdateInput } from "./FileTemplateUpdateInput";

export class FileTemplateControllerBase {
  constructor(protected readonly service: FileTemplateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FileTemplate })
  async createFileTemplate(
    @common.Body() data: FileTemplateCreateInput
  ): Promise<FileTemplate> {
    return await this.service.createFileTemplate({
      data: data,
      select: {
        configuration: true,
        createdAt: true,
        id: true,
        name: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FileTemplate] })
  @ApiNestedQuery(FileTemplateFindManyArgs)
  async fileTemplates(@common.Req() request: Request): Promise<FileTemplate[]> {
    const args = plainToClass(FileTemplateFindManyArgs, request.query);
    return this.service.fileTemplates({
      ...args,
      select: {
        configuration: true,
        createdAt: true,
        id: true,
        name: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FileTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async fileTemplate(
    @common.Param() params: FileTemplateWhereUniqueInput
  ): Promise<FileTemplate | null> {
    const result = await this.service.fileTemplate({
      where: params,
      select: {
        configuration: true,
        createdAt: true,
        id: true,
        name: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FileTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFileTemplate(
    @common.Param() params: FileTemplateWhereUniqueInput,
    @common.Body() data: FileTemplateUpdateInput
  ): Promise<FileTemplate | null> {
    try {
      return await this.service.updateFileTemplate({
        where: params,
        data: data,
        select: {
          configuration: true,
          createdAt: true,
          id: true,
          name: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FileTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFileTemplate(
    @common.Param() params: FileTemplateWhereUniqueInput
  ): Promise<FileTemplate | null> {
    try {
      return await this.service.deleteFileTemplate({
        where: params,
        select: {
          configuration: true,
          createdAt: true,
          id: true,
          name: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
