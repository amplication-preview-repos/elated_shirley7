/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FileTemplate } from "./FileTemplate";
import { FileTemplateCountArgs } from "./FileTemplateCountArgs";
import { FileTemplateFindManyArgs } from "./FileTemplateFindManyArgs";
import { FileTemplateFindUniqueArgs } from "./FileTemplateFindUniqueArgs";
import { CreateFileTemplateArgs } from "./CreateFileTemplateArgs";
import { UpdateFileTemplateArgs } from "./UpdateFileTemplateArgs";
import { DeleteFileTemplateArgs } from "./DeleteFileTemplateArgs";
import { FileTemplateService } from "../fileTemplate.service";
@graphql.Resolver(() => FileTemplate)
export class FileTemplateResolverBase {
  constructor(protected readonly service: FileTemplateService) {}

  async _fileTemplatesMeta(
    @graphql.Args() args: FileTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FileTemplate])
  async fileTemplates(
    @graphql.Args() args: FileTemplateFindManyArgs
  ): Promise<FileTemplate[]> {
    return this.service.fileTemplates(args);
  }

  @graphql.Query(() => FileTemplate, { nullable: true })
  async fileTemplate(
    @graphql.Args() args: FileTemplateFindUniqueArgs
  ): Promise<FileTemplate | null> {
    const result = await this.service.fileTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FileTemplate)
  async createFileTemplate(
    @graphql.Args() args: CreateFileTemplateArgs
  ): Promise<FileTemplate> {
    return await this.service.createFileTemplate({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FileTemplate)
  async updateFileTemplate(
    @graphql.Args() args: UpdateFileTemplateArgs
  ): Promise<FileTemplate | null> {
    try {
      return await this.service.updateFileTemplate({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FileTemplate)
  async deleteFileTemplate(
    @graphql.Args() args: DeleteFileTemplateArgs
  ): Promise<FileTemplate | null> {
    try {
      return await this.service.deleteFileTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
