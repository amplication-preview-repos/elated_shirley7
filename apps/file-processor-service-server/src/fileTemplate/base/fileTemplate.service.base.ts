/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FileTemplate as PrismaFileTemplate } from "@prisma/client";

export class FileTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FileTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.fileTemplate.count(args);
  }

  async fileTemplates(
    args: Prisma.FileTemplateFindManyArgs
  ): Promise<PrismaFileTemplate[]> {
    return this.prisma.fileTemplate.findMany(args);
  }
  async fileTemplate(
    args: Prisma.FileTemplateFindUniqueArgs
  ): Promise<PrismaFileTemplate | null> {
    return this.prisma.fileTemplate.findUnique(args);
  }
  async createFileTemplate(
    args: Prisma.FileTemplateCreateArgs
  ): Promise<PrismaFileTemplate> {
    return this.prisma.fileTemplate.create(args);
  }
  async updateFileTemplate(
    args: Prisma.FileTemplateUpdateArgs
  ): Promise<PrismaFileTemplate> {
    return this.prisma.fileTemplate.update(args);
  }
  async deleteFileTemplate(
    args: Prisma.FileTemplateDeleteArgs
  ): Promise<PrismaFileTemplate> {
    return this.prisma.fileTemplate.delete(args);
  }
}
