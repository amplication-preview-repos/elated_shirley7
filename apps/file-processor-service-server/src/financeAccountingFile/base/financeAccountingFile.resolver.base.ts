/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FinanceAccountingFile } from "./FinanceAccountingFile";
import { FinanceAccountingFileCountArgs } from "./FinanceAccountingFileCountArgs";
import { FinanceAccountingFileFindManyArgs } from "./FinanceAccountingFileFindManyArgs";
import { FinanceAccountingFileFindUniqueArgs } from "./FinanceAccountingFileFindUniqueArgs";
import { CreateFinanceAccountingFileArgs } from "./CreateFinanceAccountingFileArgs";
import { UpdateFinanceAccountingFileArgs } from "./UpdateFinanceAccountingFileArgs";
import { DeleteFinanceAccountingFileArgs } from "./DeleteFinanceAccountingFileArgs";
import { FinanceAccountingFileService } from "../financeAccountingFile.service";
@graphql.Resolver(() => FinanceAccountingFile)
export class FinanceAccountingFileResolverBase {
  constructor(protected readonly service: FinanceAccountingFileService) {}

  async _financeAccountingFilesMeta(
    @graphql.Args() args: FinanceAccountingFileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FinanceAccountingFile])
  async financeAccountingFiles(
    @graphql.Args() args: FinanceAccountingFileFindManyArgs
  ): Promise<FinanceAccountingFile[]> {
    return this.service.financeAccountingFiles(args);
  }

  @graphql.Query(() => FinanceAccountingFile, { nullable: true })
  async financeAccountingFile(
    @graphql.Args() args: FinanceAccountingFileFindUniqueArgs
  ): Promise<FinanceAccountingFile | null> {
    const result = await this.service.financeAccountingFile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FinanceAccountingFile)
  async createFinanceAccountingFile(
    @graphql.Args() args: CreateFinanceAccountingFileArgs
  ): Promise<FinanceAccountingFile> {
    return await this.service.createFinanceAccountingFile({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FinanceAccountingFile)
  async updateFinanceAccountingFile(
    @graphql.Args() args: UpdateFinanceAccountingFileArgs
  ): Promise<FinanceAccountingFile | null> {
    try {
      return await this.service.updateFinanceAccountingFile({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FinanceAccountingFile)
  async deleteFinanceAccountingFile(
    @graphql.Args() args: DeleteFinanceAccountingFileArgs
  ): Promise<FinanceAccountingFile | null> {
    try {
      return await this.service.deleteFinanceAccountingFile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
