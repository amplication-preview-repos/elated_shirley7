/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FinanceAccountingFileService } from "../financeAccountingFile.service";
import { FinanceAccountingFileCreateInput } from "./FinanceAccountingFileCreateInput";
import { FinanceAccountingFile } from "./FinanceAccountingFile";
import { FinanceAccountingFileFindManyArgs } from "./FinanceAccountingFileFindManyArgs";
import { FinanceAccountingFileWhereUniqueInput } from "./FinanceAccountingFileWhereUniqueInput";
import { FinanceAccountingFileUpdateInput } from "./FinanceAccountingFileUpdateInput";

export class FinanceAccountingFileControllerBase {
  constructor(protected readonly service: FinanceAccountingFileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FinanceAccountingFile })
  async createFinanceAccountingFile(
    @common.Body() data: FinanceAccountingFileCreateInput
  ): Promise<FinanceAccountingFile> {
    return await this.service.createFinanceAccountingFile({
      data: data,
      select: {
        content: true,
        createdAt: true,
        fileName: true,
        fileSize: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FinanceAccountingFile] })
  @ApiNestedQuery(FinanceAccountingFileFindManyArgs)
  async financeAccountingFiles(
    @common.Req() request: Request
  ): Promise<FinanceAccountingFile[]> {
    const args = plainToClass(FinanceAccountingFileFindManyArgs, request.query);
    return this.service.financeAccountingFiles({
      ...args,
      select: {
        content: true,
        createdAt: true,
        fileName: true,
        fileSize: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FinanceAccountingFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async financeAccountingFile(
    @common.Param() params: FinanceAccountingFileWhereUniqueInput
  ): Promise<FinanceAccountingFile | null> {
    const result = await this.service.financeAccountingFile({
      where: params,
      select: {
        content: true,
        createdAt: true,
        fileName: true,
        fileSize: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FinanceAccountingFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFinanceAccountingFile(
    @common.Param() params: FinanceAccountingFileWhereUniqueInput,
    @common.Body() data: FinanceAccountingFileUpdateInput
  ): Promise<FinanceAccountingFile | null> {
    try {
      return await this.service.updateFinanceAccountingFile({
        where: params,
        data: data,
        select: {
          content: true,
          createdAt: true,
          fileName: true,
          fileSize: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FinanceAccountingFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFinanceAccountingFile(
    @common.Param() params: FinanceAccountingFileWhereUniqueInput
  ): Promise<FinanceAccountingFile | null> {
    try {
      return await this.service.deleteFinanceAccountingFile({
        where: params,
        select: {
          content: true,
          createdAt: true,
          fileName: true,
          fileSize: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
