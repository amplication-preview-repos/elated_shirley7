/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AchTransaction } from "./AchTransaction";
import { AchTransactionCountArgs } from "./AchTransactionCountArgs";
import { AchTransactionFindManyArgs } from "./AchTransactionFindManyArgs";
import { AchTransactionFindUniqueArgs } from "./AchTransactionFindUniqueArgs";
import { CreateAchTransactionArgs } from "./CreateAchTransactionArgs";
import { UpdateAchTransactionArgs } from "./UpdateAchTransactionArgs";
import { DeleteAchTransactionArgs } from "./DeleteAchTransactionArgs";
import { AchTransactionService } from "../achTransaction.service";
@graphql.Resolver(() => AchTransaction)
export class AchTransactionResolverBase {
  constructor(protected readonly service: AchTransactionService) {}

  async _achTransactionsMeta(
    @graphql.Args() args: AchTransactionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AchTransaction])
  async achTransactions(
    @graphql.Args() args: AchTransactionFindManyArgs
  ): Promise<AchTransaction[]> {
    return this.service.achTransactions(args);
  }

  @graphql.Query(() => AchTransaction, { nullable: true })
  async achTransaction(
    @graphql.Args() args: AchTransactionFindUniqueArgs
  ): Promise<AchTransaction | null> {
    const result = await this.service.achTransaction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AchTransaction)
  async createAchTransaction(
    @graphql.Args() args: CreateAchTransactionArgs
  ): Promise<AchTransaction> {
    return await this.service.createAchTransaction({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AchTransaction)
  async updateAchTransaction(
    @graphql.Args() args: UpdateAchTransactionArgs
  ): Promise<AchTransaction | null> {
    try {
      return await this.service.updateAchTransaction({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AchTransaction)
  async deleteAchTransaction(
    @graphql.Args() args: DeleteAchTransactionArgs
  ): Promise<AchTransaction | null> {
    try {
      return await this.service.deleteAchTransaction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
