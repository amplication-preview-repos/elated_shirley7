/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AchTransaction as PrismaAchTransaction } from "@prisma/client";

export class AchTransactionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AchTransactionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.achTransaction.count(args);
  }

  async achTransactions(
    args: Prisma.AchTransactionFindManyArgs
  ): Promise<PrismaAchTransaction[]> {
    return this.prisma.achTransaction.findMany(args);
  }
  async achTransaction(
    args: Prisma.AchTransactionFindUniqueArgs
  ): Promise<PrismaAchTransaction | null> {
    return this.prisma.achTransaction.findUnique(args);
  }
  async createAchTransaction(
    args: Prisma.AchTransactionCreateArgs
  ): Promise<PrismaAchTransaction> {
    return this.prisma.achTransaction.create(args);
  }
  async updateAchTransaction(
    args: Prisma.AchTransactionUpdateArgs
  ): Promise<PrismaAchTransaction> {
    return this.prisma.achTransaction.update(args);
  }
  async deleteAchTransaction(
    args: Prisma.AchTransactionDeleteArgs
  ): Promise<PrismaAchTransaction> {
    return this.prisma.achTransaction.delete(args);
  }
}
