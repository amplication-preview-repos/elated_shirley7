/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AchTransactionService } from "../achTransaction.service";
import { AchTransactionCreateInput } from "./AchTransactionCreateInput";
import { AchTransaction } from "./AchTransaction";
import { AchTransactionFindManyArgs } from "./AchTransactionFindManyArgs";
import { AchTransactionWhereUniqueInput } from "./AchTransactionWhereUniqueInput";
import { AchTransactionUpdateInput } from "./AchTransactionUpdateInput";

export class AchTransactionControllerBase {
  constructor(protected readonly service: AchTransactionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AchTransaction })
  async createAchTransaction(
    @common.Body() data: AchTransactionCreateInput
  ): Promise<AchTransaction> {
    return await this.service.createAchTransaction({
      data: data,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        transactionDate: true,
        transactionId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AchTransaction] })
  @ApiNestedQuery(AchTransactionFindManyArgs)
  async achTransactions(
    @common.Req() request: Request
  ): Promise<AchTransaction[]> {
    const args = plainToClass(AchTransactionFindManyArgs, request.query);
    return this.service.achTransactions({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        transactionDate: true,
        transactionId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AchTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async achTransaction(
    @common.Param() params: AchTransactionWhereUniqueInput
  ): Promise<AchTransaction | null> {
    const result = await this.service.achTransaction({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        transactionDate: true,
        transactionId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AchTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAchTransaction(
    @common.Param() params: AchTransactionWhereUniqueInput,
    @common.Body() data: AchTransactionUpdateInput
  ): Promise<AchTransaction | null> {
    try {
      return await this.service.updateAchTransaction({
        where: params,
        data: data,
        select: {
          amount: true,
          createdAt: true,
          id: true,
          transactionDate: true,
          transactionId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AchTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAchTransaction(
    @common.Param() params: AchTransactionWhereUniqueInput
  ): Promise<AchTransaction | null> {
    try {
      return await this.service.deleteAchTransaction({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          id: true,
          transactionDate: true,
          transactionId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
